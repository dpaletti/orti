{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#orti-soil-moisture-sensor","title":"Orti: soil moisture sensor","text":"<p>What: a cheap, accurate, open, interoperable, and beautiful soil moisture sensor</p> <p>Why: other solutions miss at least one of the above features</p> <p>When: no release date yet, a lot of stuff to get through</p> <p>How: open-hardware and open-source all the way, working with the garage door open</p> <p>\u27f6 What's inside?</p> <p>\u27f6 Why another one?</p> <p>\u27f6 When can I have one?</p> <p>\u27f6 How does this make sense?</p> <p>Orti /'orti/: Italian for kitchen gardens where people grow produce for their own use.</p>"},{"location":"#whats-inside","title":"What's inside?","text":"<ul> <li>accurate and affordable: a soil moisture sensor performing in-between research   grade and consumer hardware at an affordable price (~20\u20ac).</li> <li>open and interconnected: an open-hardware design with an open-source mobile app   running (natively) on IOS and Android devices together with full support for Zigbee,   Thread/Matter and Home Automation.</li> <li>carefully designed: a good looking home accessory which looks slick indoor and   guarantees water resistance outdoor.</li> </ul>"},{"location":"#why-another-one","title":"Why another one","text":"<p>Because existing products do not tick all the boxes.</p>"},{"location":"#high-level-comparison","title":"High-Level comparison","text":"Product Price (\u20ac) Accuracy Technology Power supply Consumer sensors (Xiaomi, Ecowitt) 18-30 moderate capacitive Button/AA batteries (replaceable) Research grade (ECH20, SMT-100) 150-200 highest high frequency reflectometry Wired DIY (B-Parasite) DIY moderate capacitive Button (replaceable) Maker (PLT-1) ~20 (+extra) moderate capacitive 18650 (rechargeable + replaceable) Orti ~20 high high frequency reflectometry 2\u00d7 AAA (rechargeable + replaceable)"},{"location":"#feature-comparison","title":"Feature comparison","text":"Product Home Assistant Zigbee/Matter Mobile App Plant DB integration Ambient temp/humidity Soil temperature Irradiation Outdoor use Open Xiaomi MI Flora \u2713 \u2717 \u2713 \u2713 \u2713 \u2717 \u2713 \u2713 \u2717 Ecowitt WH51 \u2717 \u2717 \u2713 \u2717 \u2717 \u2717 \u2717 \u2713 \u2717 B-Parasite \u2713 \u2713 \u2717 \u2717 \u2713 \u2717 \u2713 \u2713 \u2713 PLT-1 \u2713 \u2717 \u2717 \u2717 \u2717 \u2713 \u2717 \u2717 \u2717 Orti \u2713 \u2713 \u2713 \u2713 \u2717 \u2713 \u2717 \u2713 \u2713 <p>Why are we missing ambient temperature and humidity sensing?</p> <p>Because these measurements pertain other sensors. Take a balcony with many plants and many soil moisture sensors, one for each pot. In such case we would have a lot of redundant measurements which a single cheap specialized sensor can replace easily. Such measurement is easily integrated in a mobile app visualization, home integration automation and the like.</p> <p>Why are we missing irradiation sensing?</p> <p>Because these measurements are rarely reliable and such sensors require specialized encasing design. Irradiation is an important measure to assess plant health but the tradeoff between sensor usefulness and added system complexity is not favorable in this phase.</p>"},{"location":"#when-can-i-have-one","title":"When can I have one?","text":"<p>A lot of stuff to get through, contributors are welcome!.</p> <p>For a more detailed view of past, ongoing and future activities see the kanban board.</p>"},{"location":"#how-does-this-make-sense","title":"How does this make sense?","text":"<p>I don't know (yet).</p>"},{"location":"#license","title":"License","text":"<p>Code, hardware and all other artifacts are licensed as open and copyleft.</p> <ul> <li>software folder: GPLv3 or later</li> <li>hardware folder: CERN-OHL-S-2.0</li> <li>everything else: CC-BY-SA-4.0</li> </ul> <p>This project is REUSE compliant. Each file contains SPDX license identifiers, and full license texts are available in the <code>LICENSES/</code> directory. License files are also provided in the project root directory to be correctly displayed in Github.</p> <p>This project employs the developer certificate of origin (see DCO) to ensure third-parties don't claim ownership over contributions. DCO is enforced through a 'signed-off-by' section in commit messages, see contributors guide for more information on how to add one to your commit messages.</p>"},{"location":"CODE_OF_CONDUCT/","title":"CODE OF CONDUCT","text":""},{"location":"CODE_OF_CONDUCT/#code-of-conduct","title":"Code of conduct","text":"<p>All creatures are welcome: We aim to create a safe space for all community members, regardless of their age, race, gender, sexual orientation, physical appearance or disability, choice of text editor, or any other qualities by which living beings can be discriminated.</p> <p>Be excellent to each other: We do not tolerate verbal or physical harassment, violence or intimidation.</p> <p>We do not tolerate life forms who refuse to share this openness and respect towards others: Creatures that are not excellent to others are not welcome.</p> <p>We continuously strive to make our community a better place for everyone in the best tradition of hackers we \"build, test, improve, reiterate\". In this ongoing adventure, we rely on the support, courage, and creativity of all members of the community.</p> <p>If you are made uncomfortable in your role as a community member, please reach us at danielepaletti98@gmail.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident.</p>"},{"location":"CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the DuckDB code of conduct and the CCC event code of conduct</p>"},{"location":"CONTRIBUTING/","title":"CONTRIBUTING","text":""},{"location":"CONTRIBUTING/#contributing","title":"Contributing","text":"<p>Hi, glad you are here. First, we setup the development environment so you are aligned with all other contributors.</p>"},{"location":"CONTRIBUTING/#development-setup","title":"Development Setup","text":"<p>Development environment reproducibility is guaranteed by mise.</p> <pre><code># Fork the repo (from github GUI) then clone\ngit clone https://github.com/&lt;your_username&gt;/orti.git\n\n# Keep it updated with upstream\ngit remote add upstream https://github.com/dpaletti/orti.git\ngit fetch upstream\n\n# Create your branch\ngit checkout -b &lt;branch_name&gt;\n\n# Install mise if you haven't already\ncurl https://mise.run | sh\n\n# Setup dev environment\nmise setup\n</code></pre> <p>Once you are done with this you will have installed all the tools specified in <code>mise.toml</code> (which you will find in the root directory).</p>"},{"location":"CONTRIBUTING/#available-tools","title":"Available tools","text":"<p>Pre-commit manages everything that runs when you commit locally and will run again in CI, that is when you open your pull-request:</p> <ul> <li>adds 'Signed-off-by: \\&lt;git user name&gt; \\&lt;git email&gt;' at the end of each commit   message (if not already there) for developer certificate of origin (DCO) compliance.   This is a legal tool to ensure that third parties cannot claim ownership over   contributors work (see DCO file for   more legal details).</li> <li>lints and formats markdown files:</li> <li>prettier: formats markdown (and many other) files</li> <li>markdownlint-cli2: lints markdown     for style and syntax errors</li> <li>vale: checks grammar and prose, if some word does not get     recognised add it to the     vocabulary</li> <li>runs reuse tool to check for reuse compliance. This allows   automated license compliance. When you create new files you need to add a copyright   and license notice on top.</li> </ul> <pre><code>reuse annotate --copyright \"&lt;github.com/dpaletti/orti&gt; contributors\" --license \"one among CERN-OHL-S-2.0 or GPLv3-or-later or CC-BY-SA-4.0\" file_name_or_pattern\n\n# This is an example of how has been done on existing files\n# reuse annotate --copyright \"&lt;github.com/dpaletti/orti&gt; contributors\" --license \"CC-BY-SA-4.0\" README.md\n# This will also add the correct year before the notice\n# This command works also on patterns for bulk annotation\n</code></pre> <p>If the file is non-commentable (e.g. JSON or binary) please add an annotations section   to REUSE.toml.</p>"},{"location":"CONTRIBUTING/#did-you-find-a-bug","title":"Did you find a bug?","text":"<p>Ensure the bug was not already reported among the Issues. If you are unable to find an open issue addressing the problem, open a new one. Be sure to include a title and clear description, as much relevant information as possible, and a code sample or an executable test case demonstrating the expected behavior that is not occurring.</p>"},{"location":"CONTRIBUTING/#did-you-write-a-patch-that-fixes-a-bug","title":"Did you write a patch that fixes a bug?","text":"<p>Great! If possible, add a unit test case to make sure the issue does not occur again. Open a new Github pull request with the patch. Ensure the PR describes both the problem and the solution. Include the relevant issue number if applicable.</p>"},{"location":"CONTRIBUTING/#do-you-want-to-add-a-new-feature","title":"Do you want to add a new feature?","text":"<ul> <li>announce that you are working or want to work on a specific issue</li> <li>avoid large pull requests, they are hard to review</li> </ul>"},{"location":"hardware/block_diagram/","title":"Block diagram","text":""},{"location":"hardware/block_diagram/#block-diagram","title":"Block diagram","text":"<pre><code>graph TD\nBATTERY[\"2 x AAA BATTERY\"]\nUSB-C\nVOLTAGE-REGULATOR[\"TPS76301DBVR &lt;br&gt; VOLTAGE REGULATOR\"]\nMICROCONTROLLER[\"NRF-52840 &lt;br&gt; MICROCONTROLLER\"]\nTEMPERATURE[\"STS4 &lt;br&gt; TEMPERATURE SENSOR\"]\n\nsubgraph OSCILLATOR\n         STAGE_1[\"DIFFERENTIAL AMPLIFIER (1)\"]\n         STAGE_2[\"DIFFERENTIAL AMPLIFIER (2)\"]\n         STAGE_3[\"DIFFERENTIAL AMPLIFIER (3)\"]\n         STAGE_1 --&gt; STAGE_2\n         STAGE_2 --&gt; STAGE_3\n         STAGE_3 --&gt; STAGE_1\nend\n\nsubgraph HUMIDITY[\"SOIL PERMITTIVITY\"]\n         LINE[\"TRANSMISSION LINE (inside the soil)\"]\n         MEASURED_FREQUENCY[\"BASELINE FREQUENCY INFLUENCED BY SOIL PERMITTIVITY\"]\n         OSCILLATOR --&gt; |drives| LINE\n         LINE --&gt; |produces| MEASURED_FREQUENCY\n         LINE --&gt; |feedbacks| OSCILLATOR\n         MEASURED_FREQUENCY --&gt; DIVIDER[\"FREQUENCY DIVIDER\"]\nend\n\nUSB-C --&gt; |feeds| VOLTAGE-REGULATOR\nVOLTAGE-REGULATOR --&gt; |recharges| BATTERY\nBATTERY --&gt;|powers| MICROCONTROLLER\nBATTERY --&gt;|powers| HUMIDITY\nBATTERY --&gt;|powers| TEMPERATURE\n\nTEMPERATURE --&gt;|signals| MICROCONTROLLER\nHUMIDITY --&gt;|signals| MICROCONTROLLER\n</code></pre>"},{"location":"hardware/differential_ring_oscillator_analysis/","title":"Differential ring oscillator analysis","text":""},{"location":"hardware/differential_ring_oscillator_analysis/#ring-oscillator-analysis","title":"Ring oscillator analysis","text":"<p>In this document we take into account a 3-stage differential ring oscillator with differential pairs as stages.</p>"},{"location":"hardware/differential_ring_oscillator_analysis/#minimum-gain-per-stage","title":"Minimum gain per stage","text":"<p>We define loop gain as the composition of single stage gains in the number of stages together with the feedback action:</p> <p>loop gain: \\(H(s) = - \\frac{A_0^3}{(1 + \\frac{s}{\\omega_0})^3}\\)</p> <p>Once defined the loop gain we must satisfy Barkhausen criterion for oscillation. The modulo of the total gain must be larger than 1. The loop phase shift must be 180 degrees or in general not an integer multiple of 360 degrees.</p> <p>Barkhausen criterion:</p> <ul> <li>\\(|H(j\\omega_0)| \\geq 1\\)</li> <li>\\(\\deg H(j\\omega_0) = 180 ^{\\circ}\\)</li> </ul> <p>minimum phase shift per stage: Each stage must contribute 180/3=60 degree of inversion.</p> <p>\\(\\tan^{-1} w_{osc}/w_0 = 60 \\rightarrow w_{\\text{osc}} = w_0\\sqrt{3}\\)</p> <p>minimum gain per stage: enforcing the first criteria we get the lower bound for stage gain replacing \\(w_{\\text{osc}}/w_0\\) with the previous result</p> <p>\\(\\frac{A_0^3}{[\\sqrt{1+ (w_{\\text{osc}}/w_0})^2]^3} = 1  \\rightarrow A_0 = 2\\)</p> <p>Barkhausen criterion is necessary but not sufficient so the stage gain we derived represents a lower bound which in practice is far from the required gain. Through this lower bound and the single stage differential gain definition we can experiment with different bias currents and resistor values.</p>"},{"location":"hardware/differential_ring_oscillator_analysis/#single-stage-analysis-differential-pair","title":"Single stage analysis: differential pair","text":"<p>In our implementation the MOSFETs are matched and the resistor have the same value \\(R_1 = R_2 = R_D\\) (drain resistor). We want to define the differential gain so to relate actual circuit components to the gain required for oscillation:</p> <p>differential gain: \\(A_{\\text{diff}} = g_m \\times R_D\\)</p> <p>We see that gain is proportional to pair resistance and MOSFET's transconductance</p> <p>transconductance: \\(g_m=\\sqrt{2\\mu_nC_{\\text{ox}}\\left(\\frac{W}{L}\\right)I_D}=\\sqrt{\\mu_nC_{\\text{ox}}\\left(\\frac{W}{L}\\right)I_{BIAS}}\\)</p> <p>We can see above that transconductance is proportional to bias current and MOSFET physical characteristics.</p> <ul> <li>\\(\\mu_n\\): electron mobility</li> <li>\\(C_{\\text{ox}}\\): oxide capacitance per unit area (sometimes these two parameters are   written as \\(k_n = \\mu_n C_{\\text{ox}}\\), the process transconductance parameter)</li> <li>\\(W/L\\): aspect ratio, the ratio of transistor channel width to channel length</li> </ul> <p>Stage gain can then be regulated through bias currents, drain resistors, and MOSFET choice (transconductance).</p>"}]}